-Format of the format string:

	%[$][flags][width][.precision][length modifier]conversion

-Flag Characters:

	"0": the converted value is padded on the left with zeros  rather  than
        blanks, for "d, i, o, u, x, X, a, A, e, E, f, F, g, and G" conversions,
	If  the  "0"  and "-" flags both appear, the "0" flag is ignored.  If a precision is
	given with a numeric conversion (d, i, o, u, x, and X), the 0 flag is ignored.

	"-":   The converted value is padded on the right with  blanks,
        rather than on the left with blanks or zeros.  A - overrides a 0 if both are given.

	"#": The value should be converted to an "alternate form", For x and X conversions
	a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it.

	" ": puts a blank before a positive number (or an empty string) produced by a signed conversion (all but %u).

	"+": A  sign  (+ or -) should always be placed before a number produced by a signed conversion.  By default, a sign is used only for negative numbers.
	A "+" overrides a space if both are used.

-Minimum Field Width:

	An optional decimal digit string (with nonzero first digit), If the converted value has fewer characters than the field width, it  will
        be padded with spaces on the left (or right, if the left-adjustment flag has been given), Instead of a decimal digit string one may write
	"*" or "*m$" (for some decimal integer m) to specify that the field width is given in the next argument, or in the m-th argument, respectively,
	which must be of type int.

	 printf("%*d", width, num);

       and

        printf("%2$*1$d", width, num);

	are the same, the 2nd specify where to refrence the arg to be converted and the minimum field width.

 	A negative  field  width  is taken as a '-' flag followed by a positive field width.

-Precission:

	An optional precision, in the form of a period ('.')  followed by an optional decimal digit string, Instead of a decimal digit string one may write "*"  or  "*m$"  (for
        some  decimal integer m) to specify that the precision is given in the next argument, or in the m-th argument, respectively, which must be of type int.
	This gives the minimum number of digits to appear  for "d, i, o, u, x, and X" conversions, the number of digits to appear after the radix character for "a, A, e, E, f,
	and F" conversions, or the maximum number of characters to be printed from a string for "s and S" conversions.

	If the precision is given as just '.', the precision is taken to be zero.  A negative precision is taken as if the precision were omitted.

-Conversion Specifiers:

	"c" : the int argument is converted to an unsigned char, and the resulting character is written.

	"s" : the const char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array
              are  written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written.  If a precision
              is given, no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must  contain  a  terminating  null
              byte.

	"p" : The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).

	"d, i" : The  int argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of digits that must appear; if the converted value
	requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.

	"u, x, X" : The unsigned int argument is converted to unsigned decimal (u), or unsigned hexadecimal (x and X) notation.  The letters abcdef are used for x
        conversions;  the  letters  ABCDEF are used for X conversions.  The precision, if any, gives the minimum number of digits that must appear; if the converted value
        requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.

	"%%" : A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
