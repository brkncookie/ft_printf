-Variadic Functions:

	A  function may be called with a varying number of arguments of varying types.

	void foo(char *fmt, ...);  --->   '...' is C syntax for a variadic function

	at least one argument must be fixed/known for the function.

	The called function must declare an object of type va_list which is used by the macros va_start(), va_arg(), and va_end().

-Macros/Functions Used in Variadic Functions:

	void va_start(va_list ap, last);
		initializes "ap" for subsequent use by va_arg() and va_end(), and must be called first.
		"last" is the last argument of which the calling function knows the type.

	type va_arg(va_list ap, type);
		The first use of the va_arg() macro after that of the va_start() macro returns the argument after "last".
		Successive invocations return the values of the	remaining arguments.

	void va_end(va_list ap);
		 Each invocation of va_start() must be matched by a corresponding invocation of va_end() in the same function.
		 After the call va_end(ap) the variable "ap" is undefined.

	void va_copy(va_list dest, va_list src);
		 The va_copy() macro copies the (previously initialized) variable argument list "src" to "dest".
		 The behavior is as if va_start() were applied to "dest" with the same "last" argument,
		 followed by the same number of va_arg() invocations that was used to reach the current state of "src".
